# frozen_string_literal: true

# A `Session` represents all of the sign in information collected from an authenticated user.
#   * `authenticated_at` - the date and time that the user authenticated with the Cognito server (not the last time
#       their access token refreshed)
#   * `browser` - the name of the browser pulled from the USER_AGENT (e.g. Chrome)
#   * `browser_version` - the browser version pulled from the USER_AGENT (e.g. 74.0.3714.0)
#   * `created_at` - when was this session created in our database
#   * `device` - the device name pulled from the USER_AGENT
#   * `device_key` - the device key generated by COGNITO
#   * `expires_at` - the name of the browser pulled from the USER_AGENT
#   * `invalidated_at` - when was this session invalidated (NULLABLE)
#   * `invalidated_by` - who invalidated this session (NULLABLE)
#   * `ip_address` - the IP address that the user authenticated with the first time the session was created,
#       pulled from the USER AGENT
#   * `platform` - the platform pulled from the USER AGENT (e.g. Macintosh)
#   * `platform_version` - the platform version pulled from the USER AGENT (e.g. 10.14.3)
#   * `updated_at` - when the session was updated last, updated using `touch` from associated Session Activities
#   * `user_id` - the associated user
class Session < ApplicationRecord
  # Ignore Removed Columns
  # --------------------------------------------------------------------------------------------------------------------

  self.ignored_columns = %w[expiring_at invalidated jti ruid]

  # Auto-Strip
  # --------------------------------------------------------------------------------------------------------------------

  auto_strip_attributes(
    :browser,
    :browser_version,
    :device,
    :platform,
    :platform_version
  )

  # Validations
  # --------------------------------------------------------------------------------------------------------------------

  validates(
    :authenticated_at,
    :browser,
    :browser_version,
    :device,
    :device_key,
    :expires_at,
    :ip_address,
    :platform,
    :platform_version,
    :user,
    presence: true
  )

  validates(
    :device_key,
    uniqueness: { scope: :authenticated_at }
  )

  # Relationships
  # --------------------------------------------------------------------------------------------------------------------

  belongs_to :invalidated_by, class_name: 'User', optional: true

  belongs_to :user, touch: true

  has_many :session_activities, dependent: :destroy

  has_one(
    :last_session_activity, -> { order(created_at: :desc).limit(1) },
    class_name: 'SessionActivity', inverse_of: false
  )

  # Scopes
  # --------------------------------------------------------------------------------------------------------------------

  scope :by_active, -> { where invalidated_at: nil }

  scope :by_invalidated, -> { where.not invalidated_at: nil }

  scope :by_jti, ->(jti) { joins(:session_activities).merge(SessionActivity.by_jti(jti)) }

  scope :by_user, ->(ids) { where user_id: ids }
end
